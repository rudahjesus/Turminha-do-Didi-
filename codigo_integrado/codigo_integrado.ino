//PROGRAM BY TURMINHA DO DIDIüòÇü§£
#include <QTRSensors.h> 

//DECLARA√á√ÉO DE VARI√ÅVEL
// MOTORES
const int motorA1 = 2, motorA2 = 3, motorB1 = 5, motorB2 = 4; // Define os pinos de controle dos motores A e B
const int speedMax = 200; // Define a velocidade m√°xima permitida para ambos os motores (0 a 255)
const int baseSpeed = 160; // Define a velocidade base dos motores, que ser√° ajustada pelo controle PID

// PID
int lastError = 0; // Armazena o √∫ltimo erro calculado, usado para o termo derivativo do PID
float Kp = 55, Kd = 30, Ki = 0.00; // Constantes de ajuste do PID (Proporcional, Derivativo, Integral)
int proportional, integral, derivative; // Vari√°veis PID

//SENSORES IR
QTRSensors qtr; // Cria um objeto da classe QTRSensors para gerenciar os sensores de reflet√¢ncia
const uint8_t SensorCount = 5; // Define o n√∫mero de sensores de reflet√¢ncia usados
uint16_t sensorValues[SensorCount]; // Array para armazenar os valores lidos pelos sensores

//ULTRASSONICO
const int trigPin = 6;
const int echoPin = 7;
float duration, distance;

// Dist√¢ncia m√≠nima para desviar de obst√°culos (em cent√≠metros)
const float safeDistance = 7.0; 

//**************************************************************************************************************************
//SETUP
void setup() {
  qtr.setTypeRC();  // Configura os sensores como tipo RC (resistor-capacitor)
  qtr.setSensorPins((const uint8_t[]){12,11,10,9,8}, SensorCount); // Define os pinos dos sensores de reflet√¢ncia

  // Configura os pinos dos motores como sa√≠da
  pinMode(motorA1, OUTPUT); 
  pinMode(motorA2, OUTPUT);
  pinMode(motorB1, OUTPUT); 
  pinMode(motorB2, OUTPUT);

  // Configura pinos do Ultrassonico
  pinMode(echoPin, INPUT);
  pinMode(trigPin, OUTPUT);

  Serial.begin(9600); // Inicializa a comunica√ß√£o serial para depura√ß√£o
  
  calibrateSensors(); // Realiza a calibra√ß√£o dos sensores de reflet√¢ncia
  delay(5000); // Pausa por 5 segundos para dar tempo de ajuste/calibra√ß√£o 
}

//**************************************************************************************************************************
//CALIBRAGEM
void calibrateSensors() {
  digitalWrite(LED_BUILTIN, HIGH);   // Acende o LED embutido para indicar o in√≠cio da calibra√ß√£o
  for (uint16_t i = 0; i < 50; i++) qtr.calibrate(); // Realiza a calibra√ß√£o dos sensores (captura valores m√°ximos e m√≠nimos)
  digitalWrite(LED_BUILTIN, LOW); // Apaga o LED embutido ap√≥s a calibra√ß√£o
}

//****************************************************************************************************************************
//LOOP
void loop() {
  varredura(); // Chama o Ultrass√¥nico para medir a dist√¢ncia
  
  if (distance < safeDistance) {
    // Se um obst√°culo estiver pr√≥ximo, desvia
    desviarObstaculo();
  } else {
    // Caso contr√°rio, segue a linha normalmente
    seguirLinha();
  }
}

//****************************************************************************************************************************
// Fun√ß√£o para seguir a linha
void seguirLinha() {
  int error = 2000 - qtr.readLineBlack(sensorValues); // Calcula o erro, que √© a diferen√ßa entre a posi√ß√£o desejada (2000) e a posi√ß√£o lida pelos sensores
  proportional = error; // O termo Proporcional √© simplesmente o erro atual (erro * t)
  integral += error; // O termo Integral acumula o erro ao longo do tempo (Ki‚à´e dt)
  derivative = error - lastError; // O termo Derivativo √© a diferen√ßa entre o erro atual e o erro anterior (Kd(Œîe/Œît) ou de/dt)
  lastError = error; // Atualiza o √∫ltimo erro para o pr√≥ximo c√°lculo do Derivativo
  
  // S = ‚àë((Kp(et) + Ki‚à´e dt + Kd(de/dt))
  int PIDValue = (Kp * proportional) + (Ki * integral) + (Kd * derivative); // Calcula o valor de corre√ß√£o da velocidade usando o PID
  bool noventa_graus = (sensorValues[0] < 100 || sensorValues[4] < 100); // 90 graus

  //Limita velocidade com base na posi√ß√£o
  int speedA, speedB;
  if (noventa_graus) {
    // Ajusta as velocidades para uma curva
    speedA = constrain(baseSpeed - PIDValue, 0, speedMax); // Motor interno da curva mais lento
    speedB = constrain(baseSpeed + PIDValue, 0, speedMax); // Motor externo da curva mais r√°pido
  } else {
    // Controle normal de linha reta
    speedA = constrain(baseSpeed + PIDValue, 0, speedMax);
    speedB = constrain(baseSpeed - PIDValue, 0, speedMax);
  }

  frente(speedA, speedB); // Envia as velocidades ajustadas para os motores para que o rob√¥ siga a linha
}

//****************************************************************************************************************************
// Fun√ß√£o para andar pra frente
void frente(int posa, int posb) {
  analogWrite(motorA1, LOW); 
  analogWrite(motorA2, posa);
  analogWrite(motorB1, LOW); 
  analogWrite(motorB2, posb);   // Controla a dire√ß√£o e a velocidade dos motores A e B
}

//******************************************************************************************
//CONTROLE EST√ÅTICO
// Fun√ß√£o para girar √† direita
void girarDireita() {
  analogWrite(motorA1, LOW);
  analogWrite(motorA2, baseSpeed);
  analogWrite(motorB1, baseSpeed);
  analogWrite(motorB2, LOW);
  delay(1000); // Gira por 1 segundo (ajuste esse valor conforme necess√°rio)
}

void girarEsquerda() {
  analogWrite(motorA1, baseSpeed);
  analogWrite(motorA2, LOW);
  analogWrite(motorB1, LOW);
  analogWrite(motorB2, baseSpeed);
  delay(1000); // Gira por 1 segundo (ajuste esse valor conforme necess√°rio)
}

// Fun√ß√£o para parar o rob√¥
void parar() {
  analogWrite(motorA1, LOW);
  analogWrite(motorA2, LOW);
  analogWrite(motorB1, LOW);
  analogWrite(motorB2, LOW);
}

//******************************************************************************************
// L√ìGICA PRA DESVIAR DE OBST√ÅCULO
// Ultrass√¥nico faz varredura
void varredura(){
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin,LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration * .0343) / 2;
  Serial.print("Dist√¢ncia: ");
  Serial.println(distance);
  delay(100);
}

// Fun√ß√£o para desviar de obst√°culos
void desviarObstaculo() {
  parar();          // Para o rob√¥
  delay(500);       // Espera meio segundo
  girarDireita();   // Gira pra direita
  delay(1000);       
  frente(200, 200); 
  delay(1000);      // anda pra frente por 1 segundo
  girarEsquerda(); // gira pra esquerda
  delay(1000);     
  frente(200, 200); // anda pra frente por 1 segundo
  delay(1000);
  girarEsqueda(); // gira pra esquerda
  delay(1000);
  seguirLinha(); // volta a rotina normal
}
