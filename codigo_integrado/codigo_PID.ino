//CODE BY TURMINHA DO DIDI üòÇü§£

#include <QTRSensors.h> 

// MOTORES
const int motorA1 = 2, motorA2 = 3, motorB1 = 5, motorB2 = 4; // Define os pinos de controle dos motores A e B
const int speedMax = 200; // Define a velocidade m√°xima permitida para ambos os motores (0 a 255)
const int baseSpeed = 160; // Define a velocidade base dos motores, que ser√° ajustada pelo controle PID

// PID
int lastError = 0; // Armazena o √∫ltimo erro calculado, usado para o termo derivativo do PID
float Kp = 55, Kd = 30, Ki = 0.00; // Constantes de ajuste do PID (Proporcional, Derivativo, Integral)

//SENSORES
QTRSensors qtr; // Cria um objeto da classe QTRSensors para gerenciar os sensores de reflet√¢ncia
const uint8_t SensorCount = 5; // Define o n√∫mero de sensores de reflet√¢ncia usados (neste caso, 5 sensores)
uint16_t sensorValues[SensorCount]; // Array para armazenar os valores lidos pelos sensores

//SETUP
void setup() {
  qtr.setTypeRC();  // Configura os sensores como tipo RC (resistor-capacitor)
  qtr.setSensorPins((const uint8_t[]){12,11,10,9,8}, SensorCount); // Define os pinos dos sensores de reflet√¢ncia

  // Configura os pinos dos motores como sa√≠da
  pinMode(motorA1, OUTPUT); 
  pinMode(motorA2, OUTPUT);
  pinMode(motorB1, OUTPUT); 
  pinMode(motorB2, OUTPUT);
  
  calibrateSensors(); // Realiza a calibra√ß√£o dos sensores de reflet√¢ncia
  delay(5000); // Pausa por 5 segundos para dar tempo de ajuste/calibra√ß√£o 
}

//CALIBRAGEM
void calibrateSensors() {
  digitalWrite(LED_BUILTIN, HIGH);   // Acende o LED embutido para indicar o in√≠cio da calibra√ß√£o
  for (uint16_t i = 0; i < 50; i++) qtr.calibrate(); // Realiza a calibra√ß√£o dos sensores (captura valores m√°ximos e m√≠nimos)
  digitalWrite(LED_BUILTIN, LOW); // Apaga o LED embutido ap√≥s a calibra√ß√£o
}

void loop() {
  int error = 2000 - qtr.readLineBlack(sensorValues); // Calcula o erro, que √© a diferen√ßa entre a posi√ß√£o desejada (2000) e a posi√ß√£o lida pelos sensores
  int proportional = error; // O termo Proporcional √© simplesmente o erro atual (erro * t)
  int integral += error; // O termo Integral acumula o erro ao longo do tempo (Sum[erro] dt)
  int derivative = error - lastError; // O termo Derivativo √© a diferen√ßa entre o erro atual e o erro anterior (delta erro / delta t)
  lastError = error; // Atualiza o √∫ltimo erro para o pr√≥ximo c√°lculo do Derivativo
  
  int PIDValue = (Kp * proportional) + (Ki * integral) + (Kd * derivative); // Calcula o valor de corre√ß√£o da velocidade usando o PID
  int speedA = constrain(baseSpeed + PIDValue, 0, speedMax); // Ajusta a velocidade do motor A com base no c√°lculo do PID e limita a velocidade para o intervalo [0, speedMax]
  int speedB = constrain(baseSpeed - PIDValue, 0, speedMax); // Ajusta a velocidade do motor B com base no c√°lculo do PID e limita a velocidade para o intervalo [0, speedMax]
  driveMotors(speedA, speedB); // Envia as velocidades ajustadas para os motores para que o rob√¥ siga a linha
}

void driveMotors(int posa, int posb) {
  analogWrite(motorA1, LOW); 
  analogWrite(motorA2, posa);
  analogWrite(motorB1, LOW); 
  analogWrite(motorB2, posb);   // Controla a dire√ß√£o e a velocidade dos motores A e B
}

